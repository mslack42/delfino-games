// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BoardGame {
  id          Int                    @id @default(autoincrement())
  name        String
  bggData     BoardGameBggData?      @relation("bggData", fields: [bggDataId], references: [id], map: "bgg", onDelete: Cascade)
  dsData      BoardGameInternalData? @relation("dsData", fields: [dsDataId], references: [id], map: "ds", onDelete: Cascade)
  bggDataId   Int
  dsDataId    Int
  GameRequest GameRequest[]
}

model BoardGameBggData {
  id                      Int                   @id @default(autoincrement())
  boardGame               BoardGame[]           @relation("bggData")
  bggId                   Int                   
  thumb                   String
  image                   String
  description             String
  specs                   BoardGameDataSpecs    @relation(fields: [boardGameDataSpecsId], references: [id], onDelete: Cascade)
  stats                   BoardGameBggDataStats @relation(fields: [boardGameBggDataStatsId], references: [id], onDelete: Cascade)
  boardGameDataSpecsId    Int
  boardGameBggDataStatsId Int
  lastUpdate              DateTime              @updatedAt
}

model BoardGameDataSpecs {
  id                    Int                     @id @default(autoincrement())
  externalDataId        Int
  minplayers            Int                     @default(1)
  maxplayers            Int                     @default(99)
  minplaytime_minutes   Int
  maxplaytime_minutes   Int
  tags                  String[]
  BoardGameExternalData BoardGameBggData[]
  BoardGameInternalData BoardGameInternalData[]
}

model BoardGameBggDataStats {
  id               Int                @id @default(autoincrement())
  bggId            Int                
  bggRank          Int?
  bggAverageScore  Float?
  BoardGameBggData BoardGameBggData[]
}

model BoardGameInternalData {
  id                   Int                 @id @default(autoincrement())
  boardGame            BoardGame[]         @relation("dsData")
  specs                BoardGameDataSpecs? @relation(fields: [boardGameDataSpecsId], references: [id])
  tags                 CustomTag[]
  boardGameDataSpecsId Int?
  lastUpdated          DateTime            @updatedAt
  ownership            Ownership           @default(Personal)
  holder               Person              @relation(name: "holderRel", fields: [holderId], references: [id], onDelete: Cascade)
  owner                Person?             @relation(name: "ownerRel", fields: [ownerId], references: [id], onDelete: Cascade)
  holderId             Int
  ownerId              Int?
  inCurrentRotation    Boolean             @default(false)
}

model Person {
  id         Int                     @id @default(autoincrement())
  name       String                  @db.VarChar(20)
  location   Location                @default(Poole)
  heldGames  BoardGameInternalData[] @relation("holderRel")
  ownedGames BoardGameInternalData[] @relation("ownerRel")
}

model CustomTag {
  id                      Int                    @id @default(autoincrement())
  tag                     String
  BoardGameInternalData   BoardGameInternalData? @relation(fields: [boardGameInternalDataId], references: [id], onDelete: Cascade)
  boardGameInternalDataId Int?
}

model GameRequest {
  id          Int       @id @default(autoincrement())
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardGameId Int
  userId      String
}

enum Ownership {
  Company
  Personal
}

enum Location {
  Poole
  Oxford
  Manchester
}

enum UserRole {
  Admin
  Holder
  Verified
  Unverified
}

// Authentication stuff

model User {
  id            String        @id @default(uuid())
  name          String
  email         String?       @unique
  password      String?
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  GameRequest   GameRequest[]

  @@map("users")
}

model Account {
  id     String   @id @default(cuid())
  userId String   @map("user_id")
  role   UserRole
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
